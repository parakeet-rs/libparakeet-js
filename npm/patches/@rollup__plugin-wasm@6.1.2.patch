diff --git a/dist/es/index.js b/dist/es/index.js
index d865dddd0239ff32187fe11962526a30801b28a1..5a724cd0e6cf096c23a6579a5257013c15840c18 100644
--- a/dist/es/index.js
+++ b/dist/es/index.js
@@ -21,7 +21,7 @@ const nodeDecode = `
 buf = Buffer.from(src, 'base64')
 `;
 const browserFilePath = `
-return _instantiateOrCompile(fetch(filepath), imports, true);
+return _instantiateOrCompile(fetch(fileuri || filepath), imports, true);
 `;
 const browserDecode = `
 var raw = globalThis.atob(src)
@@ -57,7 +57,7 @@ ${nodeDecode}
 `;
 const browserModule = `
 var buf = null
-if (filepath) {
+if (fileuri || filepath) {
   ${browserFilePath}
 }
 
@@ -87,7 +87,7 @@ const envModule = (env) => {
     }
 };
 const getHelpersModule = (env) => `
-function _loadWasmModule (sync, filepath, src, imports) {
+function _loadWasmModule (sync, filepath, fileuri, src, imports) {
   function _instantiateOrCompile(source, imports, stream) {
     var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;
     var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;
@@ -175,7 +175,7 @@ function wasm(options = {}) {
                         mappings: ''
                     },
                     code: `import { _loadWasmModule } from ${JSON.stringify(HELPERS_ID)};
-export default function(imports){return _loadWasmModule(${+isSync}, ${publicFilepath}, ${src}, imports)}`
+export default function(imports){return _loadWasmModule(${+isSync}, ${publicFilepath}, typeof require === "undefined" ? new URL(${publicFilepath}, import.meta.url).href : null, ${src}, imports)}`
                 };
             }
             return null;